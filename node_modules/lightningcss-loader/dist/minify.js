"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightningCssMinifyPlugin = void 0;
// @ts-ignore
var ModuleFilenameHelpers_1 = require("webpack/lib/ModuleFilenameHelpers");
var webpack_sources_1 = require("webpack-sources");
var lightningcss_1 = require("lightningcss");
var interface_1 = require("./interface");
var path_1 = require("path");
var utils_1 = require("./utils");
var buffer_1 = require("buffer");
var pkgPath = (0, path_1.join)(__dirname, '../package.json');
var pkg = require(pkgPath);
var PLUGIN_NAME = 'lightning-css-minify';
var CSS_FILE_REG = /\.css(?:\?.*)?$/i;
var LightningCssMinifyPlugin = /** @class */ (function () {
    function LightningCssMinifyPlugin(opts) {
        if (opts === void 0) { opts = {}; }
        var _a;
        var implementation = opts.implementation, otherOpts = __rest(opts, ["implementation"]);
        if (implementation && typeof implementation.transform !== 'function') {
            throw new TypeError("[LightningCssMinifyPlugin]: implementation.transform must be an 'lightningcss' transform function. Received ".concat(typeof implementation.transform));
        }
        this.transform = (_a = implementation === null || implementation === void 0 ? void 0 : implementation.transform) !== null && _a !== void 0 ? _a : lightningcss_1.transform;
        this.options = otherOpts;
    }
    LightningCssMinifyPlugin.prototype.apply = function (compiler) {
        var _this = this;
        var meta = JSON.stringify({
            name: pkg.name,
            version: pkg.version,
            options: this.options,
        });
        compiler.hooks.compilation.tap(PLUGIN_NAME, function (compilation) {
            compilation.hooks.chunkHash.tap(PLUGIN_NAME, function (_, hash) {
                return hash.update(meta);
            });
            if ((0, utils_1.isWebpack5)(compilation)) {
                compilation.hooks.processAssets.tapPromise({
                    name: PLUGIN_NAME,
                    stage: compilation.constructor.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,
                    additionalAssets: true,
                }, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.transformAssets(compilation)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
                compilation.hooks.statsPrinter.tap(PLUGIN_NAME, function (statsPrinter) {
                    statsPrinter.hooks.print
                        .for('asset.info.minimized')
                        // @ts-ignore
                        .tap(PLUGIN_NAME, function (minimized, _a) {
                        var green = _a.green, formatFlag = _a.formatFlag;
                        // @ts-ignore
                        return minimized ? green(formatFlag('minimized')) : undefined;
                    });
                });
            }
            else {
                compilation.hooks.optimizeChunkAssets.tapPromise(PLUGIN_NAME, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.transformAssets(compilation)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                }); }); });
            }
        });
    };
    LightningCssMinifyPlugin.prototype.transformAssets = function (compilation) {
        return __awaiter(this, void 0, void 0, function () {
            var devtool, sourcemap, _a, include, exclude, testRegExp, userTargets, transformOptions, assets;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        devtool = compilation.compiler.options.devtool;
                        sourcemap = this.options.sourceMap === undefined
                            ? (devtool && devtool.includes('source-map'))
                            : this.options.sourceMap;
                        _a = this.options, include = _a.include, exclude = _a.exclude, testRegExp = _a.test, userTargets = _a.targets, transformOptions = __rest(_a, ["include", "exclude", "test", "targets"]);
                        assets = compilation.getAssets().filter(function (asset) {
                            // Filter out already minimized
                            return !asset.info.minimized &&
                                // Filter out by file type
                                (testRegExp || CSS_FILE_REG).test(asset.name) &&
                                (0, ModuleFilenameHelpers_1.matchObject)({ include: include, exclude: exclude }, asset.name);
                        });
                        return [4 /*yield*/, Promise.all(assets.map(function (asset) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, source, map, sourceAsString, code, targets, result, codeString;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _a = asset.source.sourceAndMap(), source = _a.source, map = _a.map;
                                            sourceAsString = source.toString();
                                            code = typeof source === 'string' ? buffer_1.Buffer.from(source) : source;
                                            targets = (0, utils_1.getTargets)({
                                                default: userTargets,
                                                key: interface_1.ECacheKey.minify,
                                            });
                                            return [4 /*yield*/, this.transform(__assign({ filename: asset.name, code: code, minify: true, sourceMap: sourcemap, targets: targets }, transformOptions))];
                                        case 1:
                                            result = _b.sent();
                                            codeString = result.code.toString();
                                            compilation.updateAsset(asset.name, 
                                            // @ts-ignore
                                            sourcemap
                                                ? new webpack_sources_1.SourceMapSource(codeString, asset.name, JSON.parse(result.map.toString()), sourceAsString, map, true)
                                                : new webpack_sources_1.RawSource(codeString), __assign(__assign({}, asset.info), { minimized: true }));
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return LightningCssMinifyPlugin;
}());
exports.LightningCssMinifyPlugin = LightningCssMinifyPlugin;
