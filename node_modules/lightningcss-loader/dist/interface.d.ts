import { transform, type TransformOptions } from 'lightningcss';
declare type Filter = string | RegExp;
declare type Implementation = typeof import('lightningcss');
declare type AllowTransformOpts = Omit<TransformOptions, 'filename' | 'code' | 'minify' | 'cssModules' | 'targets'
/**
 * allow
 *
 * @sourceMap
 * @targets
 * @drafts
 * @analyzeDependencies
 * @pseudoClasses
 * @unusedSymbols
 * @errorRecovery
 */
>;
export interface IMinifyPluginOpts extends AllowTransformOpts {
    include?: Filter | Filter[];
    exclude?: Filter | Filter[];
    targets?: string | string[];
    test?: RegExp;
    implementation?: Implementation;
}
declare type AllowLoaderTransformOpts = Omit<TransformOptions, 'filename' | 'code' | 'targets' | 'inputSourceMap'
/**
 * allow
 *
 * @cssModules
 * @minify
 * @sourceMap
 * @drafts
 * @analyzeDependencies
 * @pseudoClasses
 * @unusedSymbols
 * @errorRecovery
 */
>;
export interface ILightningCssLoaderConfig extends AllowLoaderTransformOpts {
    targets?: string | string[];
    implementation?: Implementation;
}
export declare type TransformType = typeof transform;
export interface IPackageJson {
    version: string;
    name: string;
}
export declare enum ECacheKey {
    loader = "loader",
    minify = "minify"
}
export {};
